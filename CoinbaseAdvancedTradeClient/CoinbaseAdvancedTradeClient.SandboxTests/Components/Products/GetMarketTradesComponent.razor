<div class="row">
    <div class="col-6">
        <h3>Request</h3>
        <div class="form-group row p-2">
            <label class="col-4 col-form-label">Product ID</label>
            <div class="col-8">
                <InputText class="form-control" @bind-Value="@ProductId"></InputText>
            </div>
        </div>
        <div class="form-group row p-2">
            <label class="col-4 col-form-label">Limit</label>
            <div class="col-8">
                <InputNumber class="form-control" @bind-Value="@Limit"></InputNumber>
            </div>
        </div>
        <div class="form-group row p-2">
            <div class="col-8 offset-4">
                <button class="btn btn-primary" @onclick="@GetListProductsAsync">GET</button>
            </div>
        </div>
    </div>
    <div class="col-6">
        <h3>Response</h3>
        @if (Result != null)
        {
            <div class="form-group row p-2">
                <label class="col-4 col-form-label">Success</label>
                <label class="col-8 col-form-label">@Result.Success</label>
            </div>

            @if (Result.Success)
            {
                <div class="form-group row p-2">
                    <label class="col-4 col-form-label">Best Bid</label>
                    <label class="col-8 col-form-label">@Result.Data.BestBid</label>
                </div>
                <div class="form-group row p-2">
                    <label class="col-4 col-form-label">Best Ask</label>
                    <label class="col-8 col-form-label">@Result.Data.BestAsk</label>
                </div>
                <div class="form-group row p-2">
                    <label class="col-4 col-form-label">Trades</label>
                </div>
                <RadzenDataGrid TItem="Trade" Data="Result.Data.Trades" PageSize="10" AllowPaging="true" ShowPagingSummary="true">
                    <Columns>
                        <RadzenDataGridColumn TItem="Trade" Property="TradeId" Title="Trade ID" />
                        <RadzenDataGridColumn TItem="Trade" Property="ProductId" Title="Product ID" />
                        <RadzenDataGridColumn TItem="Trade" Property="Price" Title="Price" />
                        <RadzenDataGridColumn TItem="Trade" Property="Size" Title="Size" />
                        <RadzenDataGridColumn TItem="Trade" Property="Time" Title="Time" />
                        <RadzenDataGridColumn TItem="Trade" Property="Side" Title="Side" />
                        <RadzenDataGridColumn TItem="Trade" Property="Bid" Title="Bid" />
                        <RadzenDataGridColumn TItem="Trade" Property="Ask" Title="Ask" />
                    </Columns>
                </RadzenDataGrid>
            }
            else
            {
                <ErrorResponseComponent TItem="TradesPage" Result="Result" />
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public ICoinbaseAdvancedTradeApiClient Client { get; set; }

    public string ProductId { get; set; }

    public int Limit { get; set; } = 50;

    public ApiResponse<TradesPage> Result { get; set; } = null;

    public async Task GetListProductsAsync()
    {
        Result = await Client.Products.GetMarketTradesAsync(ProductId, Limit);
    }
}