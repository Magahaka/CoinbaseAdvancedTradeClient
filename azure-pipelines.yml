# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  vmImage: 'windows-2022'

variables:
  FeedName: 'Pearl-Aegis'
  SolutionFileName: 'CoinbaseAdvancedTradeClient.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  # Create Package Guidelines
  PullRequestBuild: ${{ eq(variables['Build.Reason'], 'PullRequest') }}
  ManualMainBuild: ${{ and(eq(variables['Build.Reason'], 'Manual'), eq(variables['Build.SourceBranch'], 'refs/heads/main')) }}
  CIMainBuild: ${{ and(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.SourceBranch'], 'refs/heads/main')) }}
  PackageResults: ${{ or(or(eq(variables.PullRequestBuild, true), eq(variables.ManualMainBuild, true)), eq(variables.CIMainBuild, true)) }}
  # Versioning Variables
  Major: '1'
  Minor: '0'
  Patch: $[counter(format('{0}.{1}', variables['Major'], variables['Minor']), 0)]
  ReleaseVersionNumber: '$(Major).$(Minor).$(Patch)'
  ReleaseCandidateNumber: '$(ReleaseVersionNumber)-rc'

steps:
- task: NuGetToolInstaller@1
  displayName: 'Use NuGet'

- task: NuGetCommand@2
  displayName: NuGet Restore
  inputs:
    restoreSolution: '**/$(SolutionFileName)'
    vstsFeed: '/$(FeedName)'
    restoreDirectory: '$(Agent.BuildDirectory)\Packages'

- task: VSBuild@1
  displayName: 'Build Solution'
  inputs:
    solution: '**/$(SolutionFileName)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  displayName: 'Run Unit Tests'
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*UnitTests.dll
      !**\*TestAdapter.dll
      !**\obj\**
    searchFolder: '$(System.DefaultWorkingDirectory)'


- task: DotNetCoreCLI@2
  displayName: 'NuGet Pack'
  condition: and(succeeded(), eq(variables.PackageResults, true))
  inputs:
    command: pack
    versioningScheme: byEnvVar
    ## Create an offical package for Manual Main branch builds
    ${{ if eq(variables.ManualMainBuild, true) }}:
      versionEnvVar: 'ReleaseVersionNumber'
    # Create an offical package for CI into Main branch
    ${{ if eq(variables.CIMainBuild, true) }}:
      versionEnvVar: 'ReleaseVersionNumber'
    # Create a release candidate package for pull requests
    ${{ if eq(variables.PullRequestBuild, true) }}:
      versionEnvVar: 'ReleaseCandidateNumber'
    # Any other type of build produces a release candidate
    ${{ if and(and(eq(variables.ManualMainBuild, false), eq(variables.CIMainBuild, false)), eq(variables.PullRequestBuild, false)) }}:
      versionEnvVar: 'ReleaseCandidateNumber'

- task: NuGetAuthenticate@0
  displayName: 'NuGet Authenticate'

- task: NuGetCommand@2
  displayName: 'NuGet Push'
  condition: and(succeeded(), eq(variables.PackageResults, true))
  inputs:
    command: push
    publishVstsFeed: '$(FeedName)'