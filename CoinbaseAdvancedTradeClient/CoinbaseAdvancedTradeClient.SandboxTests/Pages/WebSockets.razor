@page "/websockets"
@inject IOptionsMonitor<WebSocketClientConfig> Config

<PageTitle>WebSocket Connection</PageTitle>

<h1>WebSocket Connection</h1>

<div class="row">
    <div class="col-4">
        <h3>Subscription</h3>
        <div class="form-group row p-2">
            <label class="col-4 col-form-label">Product IDs</label>
            <div class="col-8">
                <InputText class="form-control" @bind-Value="@ProductIds"></InputText>
            </div>
        </div>
        <div class="form-group row p-2">
            <label class="col-4 col-form-label">Channel</label>
            <div class="col-8">
                <InputSelect class="form-control" @bind-Value="@Channel">
                    <option value="@WebSocketChannels.Level2">Level 2</option>
                    <option value="@WebSocketChannels.MarketTrades">Market Trades</option>
                    <option value="@WebSocketChannels.Status">Status</option>
                    <option value="@WebSocketChannels.Ticker">Ticker</option>
                    <option value="@WebSocketChannels.TickerBatch">Ticker Batch</option>
                    <option value="@WebSocketChannels.User">User</option>
                </InputSelect>
            </div>
        </div>
        <div class="form-group row p-2">
            <div class="col-4 offset-4">
                <button class="btn btn-primary" @onclick="@ConnectAsync">Connect</button>
            </div>
            <div class="col-4">
                @if (Client.IsConnected)
                {
                    <label class="col-form-label">Connected</label>
                }
            </div>
        </div>
        <div class="form-group row p-2">
            <div class="col-4 offset-4">
                <button class="btn btn-primary" @onclick="@Subscribe">Subscribe</button>
            </div>
        </div>
        <div class="form-group row p-2">
            <div class="col-4 offset-4">
                <button class="btn btn-primary" @onclick="@Unsubscribe">Unsubscribe</button>
            </div>
        </div>
        <div class="form-group row p-2">
            <div class="col-4 offset-4">
                <button class="btn btn-primary" @onclick="@Disconnect">Disconnect</button>
            </div>
        </div>
        <div class="form-group row p-2">
            <div class="col-4 offset-4">
                <button class="btn btn-primary" @onclick="@DisposeClient">Dispose Client</button>
            </div>
        </div>
    </div>
    <div class="col-8">
        <h3>Messages</h3>
        <RadzenTabs>
            <Tabs>
                <RadzenTabsItem Text="Level 2">
                    <Level2MessageComponent Messages="@Level2Messages" />
                </RadzenTabsItem>
                <RadzenTabsItem Text="Market Trades">
                    <MarketTradesMessageComponent Messages="@MarketTradesMessages" />
                </RadzenTabsItem>
                <RadzenTabsItem Text="Status">
                    <StatusMessageComponent Messages="@StatusMessages" />
                </RadzenTabsItem>
                <RadzenTabsItem Text="Ticker">
                    <TickerMessageComponent Messages="@TickerMessages" />
                </RadzenTabsItem>
                <RadzenTabsItem Text="User">
                    <UserMessageComponent Messages="@UserMessages" />
                </RadzenTabsItem>
                <RadzenTabsItem Text="Subscription">
                    <SubscriptionMessageComponent Messages="@SubscriptionMessages" />
                </RadzenTabsItem>
                <RadzenTabsItem Text="Error">
                    <ErrorMessageComponent Messages="@ErrorMessages" />
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </div>
</div>

@code {
    public CoinbaseAdvancedTradeWebSocketClient Client { get; private set; }

    public string ProductIds { get; set; } = string.Empty;

    public string Channel { get; set; } = string.Empty;

    public List<WebSocketMessage<Level2Event>> Level2Messages { get; set; } = new List<WebSocketMessage<Level2Event>>();
    public List<WebSocketMessage<MarketTradesEvent>> MarketTradesMessages { get; set; } = new List<WebSocketMessage<MarketTradesEvent>>();
    public List<WebSocketMessage<StatusEvent>> StatusMessages { get; set; } = new List<WebSocketMessage<StatusEvent>>();
    public List<WebSocketMessage<TickerEvent>> TickerMessages { get; set; } = new List<WebSocketMessage<TickerEvent>>();
    public List<WebSocketMessage<UserEvent>> UserMessages { get; set; } = new List<WebSocketMessage<UserEvent>>();
    public List<WebSocketMessage<SubscriptionEvent>> SubscriptionMessages { get; set; } = new List<WebSocketMessage<SubscriptionEvent>>();
    public List<string> ErrorMessages { get; set; } = new List<string>();

    protected override void OnInitialized()
    {
        Client = new CoinbaseAdvancedTradeWebSocketClient(Config.CurrentValue);

        base.OnInitialized();
    }

    public async Task ConnectAsync()
    {
        var connected = await Client.ConnectAsync(MessageReceivedCallback, OpenedCallback, ClosedCallback, ErrorCallback);
    }

    public void Subscribe()
    {
        var productIdList = ProductIds?.Split(",").ToList();
        Client.Subscribe(Channel, productIdList);
    }

    public void Unsubscribe()
    {
        var productIdList = ProductIds?.Split(",").ToList();
        Client.Unsubscribe(Channel, productIdList);
    }

    public void Disconnect()
    {
        Client.Disconnect();
    }

    public void DisposeClient()
    {
        Client.Dispose();
    }

    private async void MessageReceivedCallback(object? message, bool parsed)
    {
        if (parsed)
        {
            switch (message)
            {
                case WebSocketMessage<Level2Event> level2:
                    Level2Messages.Add(level2);
                    break;
                case WebSocketMessage<MarketTradesEvent> marketTrades:
                    MarketTradesMessages.Add(marketTrades);
                    break;
                case WebSocketMessage<StatusEvent> status:
                    StatusMessages.Add(status);
                    break;
                case WebSocketMessage<TickerEvent> ticker:
                    TickerMessages.Add(ticker);
                    break;
                case WebSocketMessage<UserEvent> user:
                    UserMessages.Add(user);
                    break;
                case WebSocketMessage<SubscriptionEvent> subscription:
                    SubscriptionMessages.Add(subscription);
                    break;
                default:
                    ErrorMessages.Add($"Failed to parse message: {message}");
                    break;
            }
        }
        else
        {
            ErrorMessages.Add($"Failed to parse message: {message}");
        }

        // For real-time UI updates
        await InvokeAsync(StateHasChanged);
    }

    private void OpenedCallback(object? obj, EventArgs e)
    {

    }

    private void ClosedCallback(object? obj, EventArgs e)
    {

    }

    private async void ErrorCallback(Exception exception)
    {
        ErrorMessages.Add(exception.Message);

        await InvokeAsync(StateHasChanged);
    }
}
